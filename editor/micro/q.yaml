---
filetype: q

detect:
    filename: "\\.q$"

rules:
    # Conditionals and control flow
    - special: "\\b(return)\\b"
    - statement: "\\b(else|loop|if|switch)\\b"
    - preproc: "\\b(import|const|external)\\b"
    - symbol.operator: "[-+/*=<>!~%&|^]|:="

    # Types
    - symbol: "(,|\\.)"
    - type: "\\b(u?int(8|16|32|64)?|float(32|64))\\b"
    - type: "\\b(byte|rune|string|bool)\\b"
    - type.keyword: "\\b(struct)\\b"
    - constant.bool: "\\b(true|false)\\b"

    # Brackets
    - symbol.brackets: "(\\{|\\})"
    - symbol.brackets: "(\\(|\\))"
    - symbol.brackets: "(\\[|\\])"

    # Numbers and strings
    - constant.number: "\\b([0-9]+|0x[0-9a-fA-F]*)\\b|'.'"

    - constant.string:
      start: "\""
      end: "\""
      skip: "\\\\."
      rules:
          - constant.specialChar: "%."
          - constant.specialChar: "\\\\[abfnrtv'\\\"\\\\]"
          - constant.specialChar: "\\\\([0-7]{3}|x[A-Fa-f0-9]{2}|u[A-Fa-f0-9]{4}|U[A-Fa-f0-9]{8})"

    - constant.string:
      start: "'"
      end: "'"
      skip: "\\\\."
      rules:
          - error: "..+"
          - constant.specialChar: "%."
          - constant.specialChar: "\\\\[abfnrtv'\\\"\\\\]"
          - constant.specialChar: "\\\\([0-7]{3}|x[A-Fa-f0-9]{2}|u[A-Fa-f0-9]{4}|U[A-Fa-f0-9]{8})"

    - constant.string:
      start: "`"
      end: "`"

    - comment:
      start: "//"
      end: "$"
      rules:
          - todo: "(TODO|XXX|FIXME):?"
